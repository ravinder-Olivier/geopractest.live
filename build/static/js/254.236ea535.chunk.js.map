{"version":3,"file":"static/js/254.236ea535.chunk.js","mappings":"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","sources":["i18n/locales.ts","components/Message.tsx","components/Guesser.tsx"],"sourcesContent":["import { LanguageName } from \"../lib/country\";\nimport { Locale, LocaleMessages } from \"../lib/locale\";\nimport { English } from \"./messages/en-CA\";\nimport { Spanish } from \"./messages/es-MX\";\n\n// export const LOCALES: LocaleList = {\n//   English: \"English\",\n//   Spanish: \"Spanish\",\n// };\n\nexport const LOCALES = {\n  English: English,\n  Spanish: Spanish,\n};\n\nexport const langNameMap: Record<Locale, LanguageName> = {\n  \"es-MX\": \"NAME_ES\",\n  \"en-CA\": \"NAME_EN\",\n};\n","// import useCheckMobile from \"../hooks/useCheckMobile\";\nimport { isMobile } from \"react-device-detect\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useContext } from \"react\";\nimport { LocaleContext } from \"../i18n/LocaleContext\";\nimport { langNameMap } from \"../i18n/locales\";\nimport { useSelector } from 'react-redux'\ntype Props = {\n  win: boolean;\n  error: any;\n  guesses: number;\n};\n\nexport function Message({ win, error, guesses }: Props) {\n  const { locale } = useContext(LocaleContext);\n  const answerCountry = useSelector((state: any) => state.globe.answerCountry)\n\n  const answerName = useSelector((state: any) => state.globe.answerName)\n  let name = answerName;\n  if (locale !== \"en-CA\") {\n    const langName = langNameMap[locale];\n    name = answerCountry[\"properties\"][langName];\n  }\n\n  if (error) {\n    return <p className=\"text-red-700 \">{error}</p>;\n  } else if (win) {\n    return (\n      <p className=\"text-green-800 dark:text-green-300 font-bold \">\n        <FormattedMessage id=\"Game7\" values={{ answer: name }} />\n      </p>\n    );\n  } else if (guesses === 0) {\n    return (\n      <p className=\"text-gray-700 dark:text-gray-400 \">\n        <FormattedMessage id=\"Game3\" />\n      </p>\n    );\n  } else if (guesses === 1) {\n    return (\n      <p className=\"text-gray-700 dark:text-gray-400 \">\n        <FormattedMessage\n          id=\"Game4\"\n          values={{ click: isMobile ? \"tap\" : \"click\" }}\n        />\n      </p>\n    );\n  } else {\n    return <p className=\"text-red-700 \"></p>;\n  }\n}\n","import { FormEvent, useContext, useState } from \"react\";\nimport { Country } from \"../lib/country\";\nimport { Message } from \"./Message\";\nimport { polygonDistance } from \"../util/distance\";\nimport alternateNames from \"../data/alternate_names.json\";\nimport { LocaleContext } from \"../i18n/LocaleContext\";\nimport { useSelector } from \"react-redux\";\nimport { today } from \"../util/dates\";\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\nimport { Guesses } from \"../lib/localStorage\";\nimport localeList from \"../i18n/messages\";\nimport { FormattedMessage } from \"react-intl\";\nimport { langNameMap } from \"../i18n/locales\";\nconst countryData: Country[] = require(\"../data/country_data.json\").features;\n\ntype Props = {\n  guesses: Country[];\n  setGuesses: React.Dispatch<React.SetStateAction<Country[]>>;\n  win: boolean;\n  setWin: React.Dispatch<React.SetStateAction<boolean>>;\n  newGame: boolean;\n  setNewGame: React.Dispatch<React.SetStateAction<boolean>>;\n  setScreen: React.Dispatch<React.SetStateAction<string>>;\n\n  setInTheGame: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport default function Guesser({ guesses, setGuesses, win, setWin, setInTheGame, setNewGame, setScreen, newGame }: Props) {\n  const [guessName, setGuessName] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const { locale } = useContext(LocaleContext);\n  const [storedGuesses, storeGuesses] = useLocalStorage<Guesses>(\"guesses\", {\n    day: today,\n    countries: [],\n  });\n  const langName = langNameMap[locale];\n  const answerCountry = useSelector((state: any) => state.globe.answerCountry)\n\n  const answerName = useSelector((state: any) => state.globe.answerName)\n  const handleReset = () => {\n    localStorage.removeItem(\"guesses\")\n    setTimeout(() => {\n      setNewGame(!newGame)\n      setInTheGame(false)\n      setWin(false)\n      setScreen(\"Reset\")\n    }, 500);\n\n\n  }\n\n  function findCountry(countryName: string, list: Country[]) {\n    return list.find((country) => {\n      const { NAME, NAME_LONG, ABBREV, ADMIN, BRK_NAME, NAME_SORT } =\n        country.properties;\n\n      return (\n        NAME.toLowerCase() === countryName ||\n        NAME_LONG.toLowerCase() === countryName ||\n        ADMIN.toLowerCase() === countryName ||\n        ABBREV.toLowerCase() === countryName ||\n        ABBREV.replace(/\\./g, \"\").toLowerCase() === countryName ||\n        NAME.replace(/-/g, \" \").toLowerCase() === countryName ||\n        BRK_NAME.toLowerCase() === countryName ||\n        NAME_SORT.toLowerCase() === countryName ||\n        country.properties[langName].toLowerCase() === countryName\n      );\n    });\n  }\n\n  // Check territories function\n  function runChecks() {\n    const trimmedName = guessName\n      .trim()\n      .toLowerCase()\n      .replace(/&/g, \"and\")\n      .replace(/^st\\s/g, \"st. \");\n    const oldNamePair = alternateNames.find((pair) => {\n      return pair.old === trimmedName;\n    });\n    const userGuess = oldNamePair ? oldNamePair.real : trimmedName;\n    const alreadyGuessed = findCountry(userGuess, guesses);\n    if (alreadyGuessed) {\n      setError(localeList[locale][\"Game6\"]);\n      return;\n    }\n    const guessCountry = findCountry(userGuess, countryData);\n    if (!guessCountry) {\n      setError(localeList[locale][\"Game5\"]);\n      return;\n    }\n    if (guessCountry.properties.NAME === answerName) {\n      setWin(true);\n    }\n    return guessCountry;\n  }\n\n  function addGuess(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    setError(\"\");\n    let guessCountry = runChecks();\n    if (guessCountry && answerCountry) {\n      guessCountry[\"proximity\"] = polygonDistance(guessCountry, answerCountry);\n      setGuesses([...guesses, guessCountry]);\n      setGuessName(\"\");\n    }\n  }\n\n  return (\n    <div className=\"mt-10 mb-6 block mx-auto text-center\">\n      <form\n        onSubmit={addGuess}\n        className=\"w-80 flex space-x-4 mx-auto my-2 justify-center\"\n      >\n        <input\n          className=\"shadow px-2 py-1 md:py-0\n          text-gray-700 dark:bg-slate-300 focus:outline-none \n          focus:shadow-outline disabled:bg-slate-400\n          border rounded disabled:border-slate-400\n          w-full\"\n          type=\"text\"\n          name=\"guesser\"\n          id=\"guesser\"\n          value={guessName}\n          onChange={(e) => setGuessName(e.currentTarget.value)}\n          disabled={win}\n          placeholder={guesses.length === 0 ? localeList[locale][\"Game1\"] : \"\"}\n          autoComplete=\"new-password\"\n        />\n        <button\n          className=\"bg-blue-700 dark:bg-purple-800 hover:bg-blue-900 dark:hover:bg-purple-900 disabled:bg-blue-900  text-white \n          font-bold py-1 md:py-2 px-4 rounded focus:shadow-outline \"\n          type=\"submit\"\n          disabled={win}\n        >\n          <FormattedMessage id=\"Game2\" />\n        </button>\n      </form>\n      <Message win={win} error={error} guesses={guesses.length}\n      />\n      {win ? <button\n        className=\"bg-blue-700 dark:bg-purple-800 hover:bg-blue-900 dark:hover:bg-purple-900 disabled:bg-blue-900  text-white \n          font-bold py-1 md:py-2 px-4 rounded focus:shadow-outline \"\n        onClick={handleReset}\n      >\n        New game?\n      </button> : null\n      }\n    </div >\n  );\n}\n"],"names":["langNameMap","English","Spanish","Message","win","error","guesses","locale","useContext","LocaleContext","answerCountry","useSelector","state","globe","name","answerName","langName","className","id","values","answer","click","isMobile","countryData","require","Guesser","setGuesses","setWin","setInTheGame","setNewGame","setScreen","newGame","useState","guessName","setGuessName","setError","useLocalStorage","day","today","countries","findCountry","countryName","list","find","country","properties","NAME","NAME_LONG","ABBREV","ADMIN","BRK_NAME","NAME_SORT","toLowerCase","replace","onSubmit","e","preventDefault","guessCountry","trimmedName","trim","oldNamePair","alternateNames","pair","old","userGuess","real","localeList","runChecks","polygonDistance","type","value","onChange","currentTarget","disabled","placeholder","length","autoComplete","onClick","localStorage","removeItem","setTimeout"],"sourceRoot":""}