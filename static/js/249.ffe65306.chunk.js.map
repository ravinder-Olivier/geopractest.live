{"version":3,"file":"static/js/249.ffe65306.chunk.js","mappings":"8OAiBA,SAASA,EAAeC,EAAsBC,GAC5C,OAAO,OAAID,GAAWE,MAAK,SAACC,EAAGC,GAE7B,GAAIH,EAAc,CAChB,IAGMI,EAHgBC,KAAKC,MACzBC,aAAaC,QAAQ,aAEUC,WAAWC,KAC5C,OAAIR,EAAEO,WAAWC,OAASN,GAChB,EACCD,EAAEM,WAAWC,OAASN,EACxB,EAEAF,EAAES,UAAYR,EAAEQ,UAK3B,OAAIT,EAAEO,WAAWC,OAASN,EAAAA,GAChB,EACCD,EAAEM,WAAWC,OAASN,EAAAA,EACxB,EAEAF,EAAES,UAAYR,EAAEQ,aAKd,SAASC,EAAT,GAAgE,IAAhDC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,IAAKC,EAAiC,EAAjCA,SAAUf,EAAuB,EAAvBA,aACrD,GAA4CgB,EAAAA,EAAAA,UAC1ClB,EAAee,EAASb,IAD1B,eAAOiB,EAAP,KAAuBC,EAAvB,KAGA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAWC,EAAAA,EAAAA,YAAWC,EAAAA,GAAtBF,OAYFG,EAX4C,CAChD,QAAS,UACT,QAAS,UACT,QAAS,UACT,QAAS,UACT,QAAS,UACT,QAAS,UACT,QAAS,UACT,QAAS,UACT,QAAS,WAEkBH,IAE7BI,EAAAA,EAAAA,YAAU,WACRP,EAAkBpB,EAAee,EAASb,MACzC,CAACa,EAASb,IAgBb,IAAM0B,EAAYZ,EAAM,SAAW,UAUnC,IAAMa,EAAUV,EAAe,GACzBW,EAAWX,EAAeA,EAAeY,OAAS,GAExD,GAAoDb,EAAAA,EAAAA,WAAS,GAA7D,eAAOc,EAAP,KAA2BC,EAA3B,KACMC,EAAmBF,EAAqBb,EAAiBJ,EAE/D,OACE,iBAAKoB,UAAU,mDAAf,UACGhB,EAAeY,OAAS,IACvB,cAAGI,UAAU,OAAb,SACGH,GACC,wBACE,SAAC,IAAD,CAAkBI,GAAIR,OAGxB,wBACE,SAAC,IAAD,CAAkBQ,GAAG,iBAK7B,eAAID,UAAU,wCAAd,SACGD,EAAiBG,KAAI,SAACC,EAAOC,GAC5B,MAAyCD,EAAM3B,WAAvC6B,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAAQ7B,EAA1B,EAA0BA,KACpB8B,GADN,EAAgCC,MACV,IAAIC,oBACtBC,EAAOL,GAAY,GAAKC,EAAS7B,EAKrC,MAJe,UAAXW,IACFsB,EAAOP,EAAM3B,WAAWe,KAIxB,yBACE,oBACEoB,QAAS,SAACC,GAAD,OAzCvB,SAAuBA,EAAmBR,GACxC,IAAMS,EAAiBhB,EACnBb,EAAeoB,GACfxB,EAAQwB,GACZ,GAA+BU,EAAAA,EAAAA,GAAWD,GAAlCE,EAAR,EAAQA,IAAKC,EAAb,EAAaA,IAAKC,EAAlB,EAAkBA,UAClBC,EAAAA,EAAAA,IAAU,CAAEH,IAAAA,EAAKC,IAAAA,EAAKC,SAAAA,GAAYnC,EAAU,QAoChBqC,CAAcP,EAAGR,IACjCJ,UAAU,mCAFZ,WAIE,gBACEoB,IAAG,kCAA6Bb,EAAKc,cAAlC,QACHC,IAAKZ,EACLV,UAAU,MAEZ,iBAAMA,UAAU,yBAAhB,SAA0CU,QAVrCN,QAgBdV,GAAWC,IACV,iBAAKK,UAAU,OAAf,WACE,iBAAKA,UAAU,8BAAf,WACE,0BACE,SAAC,IAAD,CAAkBC,GAAG,UADvB,IACmC,IA3E7C,SAAkBsB,EAAWrC,GAC3B,IAEMsC,EAAQtC,EAAQqC,EAFE,QAEoBA,EAAI,IAChD,GAAIC,EAFQ,GAEK,MAAO,OAExB,IAAMC,EAJM,GAIIC,KAAKC,MAAMH,EAJf,IASZ,MAAM,KAAN,OAAmBC,EAFbG,QAAQ,GAAGC,QAAQ,wBAAyB,MAmEvCC,CAAQ,OAACpC,QAAD,IAACA,OAAD,EAACA,EAAShB,UAAWQ,OAEhC,SAAC,IAAD,CACEwB,KAAK,QACLqB,UAAW5C,EACX6C,OAAQ9C,EACR+C,GAAG,KACHC,IAAI,cAGR,wBACE,mBACEvB,QAAS,kBAAMb,GAAuBD,IACtCG,UAAU,OAFZ,UAIE,iBAAMA,UAAU,oBAAhB,UACE,SAAC,IAAD,CACEC,GAAIJ,EAAqB,gBAAkB","sources":["components/List.tsx"],"sourcesContent":["import { SyntheticEvent, useContext, useEffect, useState } from \"react\";\nimport { GlobeMethods } from \"react-globe.gl\";\nimport { FormattedMessage } from \"react-intl\";\nimport { LocaleContext } from \"../i18n/LocaleContext\";\nimport { Country, LanguageName } from \"../lib/country\";\nimport { Locale } from \"../lib/locale\";\nimport { answerName } from \"../util/answer\";\nimport { findCentre, turnGlobe } from \"../util/globe\";\nimport Toggle from \"./Toggle\";\n\ntype Props = {\n  guesses: Country[];\n  win: boolean;\n  globeRef: React.MutableRefObject<GlobeMethods>;\n  practiceMode: boolean;\n};\n\nfunction reorderGuesses(guessList: Country[], practiceMode: boolean) {\n  return [...guessList].sort((a, b) => {\n    // practice\n    if (practiceMode) {\n      const answerCountry = JSON.parse(\n        localStorage.getItem(\"practice\") as string\n      ) as Country;\n      const answerName = answerCountry.properties.NAME;\n      if (a.properties.NAME === answerName) {\n        return -1;\n      } else if (b.properties.NAME === answerName) {\n        return 1;\n      } else {\n        return a.proximity - b.proximity;\n      }\n    }\n\n    // daily\n    if (a.properties.NAME === answerName) {\n      return -1;\n    } else if (b.properties.NAME === answerName) {\n      return 1;\n    } else {\n      return a.proximity - b.proximity;\n    }\n  });\n}\n\nexport default function List({ guesses, win, globeRef, practiceMode }: Props) {\n  const [orderedGuesses, setOrderedGuesses] = useState(\n    reorderGuesses(guesses, practiceMode)\n  );\n  const [miles, setMiles] = useState(false);\n  const { locale } = useContext(LocaleContext);\n  const langNameMap: Record<Locale, LanguageName> = {\n    \"pt-BR\": \"NAME_PT\",\n    \"es-MX\": \"NAME_ES\",\n    \"en-CA\": \"NAME_EN\",\n    \"fr-FR\": \"NAME_FR\",\n    \"de-DE\": \"NAME_DE\",\n    \"hu-HU\": \"NAME_HU\",\n    \"pl-PL\": \"NAME_PL\",\n    \"it-IT\": \"NAME_IT\",\n    \"sv-SE\": \"NAME_SV\",\n  };\n  const langName = langNameMap[locale];\n\n  useEffect(() => {\n    setOrderedGuesses(reorderGuesses(guesses, practiceMode));\n  }, [guesses, practiceMode]);\n\n  function formatKm(m: number, miles: boolean) {\n    const METERS_PER_MILE = 1609.34;\n    const BIN = 10;\n    const value = miles ? m / METERS_PER_MILE : m / 1000;\n    if (value < BIN) return \"< \" + BIN;\n\n    const rounded = Math.round(value / BIN) * BIN;\n    // const max = min + BIN;\n    const format = (num: number) =>\n      num.toFixed(0).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n    return `~ ${format(rounded)}`;\n  }\n\n  const qualifier = win ? \"Answer\" : \"Closest\";\n\n  function turnToCountry(e: SyntheticEvent, idx: number) {\n    const clickedCountry = isSortedByDistance\n      ? orderedGuesses[idx]\n      : guesses[idx];\n    const { lat, lng, altitude } = findCentre(clickedCountry);\n    turnGlobe({ lat, lng, altitude }, globeRef, \"zoom\");\n  }\n\n  const closest = orderedGuesses[0];\n  const farthest = orderedGuesses[orderedGuesses.length - 1];\n\n  const [isSortedByDistance, setIsSortedByDistance] = useState(true);\n  const guessesToDisplay = isSortedByDistance ? orderedGuesses : guesses;\n\n  return (\n    <div className=\"md:ml-10 md:mr-0 py-8 dark:text-white z-30 mb-20\">\n      {orderedGuesses.length > 0 && (\n        <p className=\"my-1\">\n          {isSortedByDistance ? (\n            <b>\n              <FormattedMessage id={qualifier} />\n            </b>\n          ) : (\n            <b>\n              <FormattedMessage id=\"Guessed\" />\n            </b>\n          )}\n        </p>\n      )}\n      <ul className=\"grid grid-cols-3 md:grid-cols-4 gap-3\">\n        {guessesToDisplay.map((guess, idx) => {\n          const { NAME_LEN, ABBREV, NAME, FLAG } = guess.properties;\n          const flag = (FLAG || \"\").toLocaleLowerCase();\n          let name = NAME_LEN >= 10 ? ABBREV : NAME;\n          if (locale !== \"en-CA\") {\n            name = guess.properties[langName];\n          }\n\n          return (\n            <li key={idx}>\n              <button\n                onClick={(e) => turnToCountry(e, idx)}\n                className=\"flex items-center cursor-pointer\"\n              >\n                <img\n                  src={`https://flagcdn.com/w20/${flag.toLowerCase()}.png`}\n                  alt={name}\n                  className=\"\"\n                />\n                <span className=\"ml-2 text-md text-left\">{name}</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n      {closest && farthest && (\n        <div className=\"mt-8\">\n          <div className=\"flex items-center space-x-1\">\n            <p>\n              <FormattedMessage id=\"Game8\" />:{\" \"}\n              {formatKm(closest?.proximity, miles)}\n            </p>\n            <Toggle\n              name=\"miles\"\n              setToggle={setMiles}\n              toggle={miles}\n              on=\"km\"\n              off=\"miles\"\n            />\n          </div>\n          <p>\n            <button\n              onClick={() => setIsSortedByDistance(!isSortedByDistance)}\n              className=\"mt-2\"\n            >\n              <span className=\"text-md underline\">\n                <FormattedMessage\n                  id={isSortedByDistance ? \"SortByGuesses\" : \"SortByDistance\"}\n                />\n              </span>\n            </button>\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["reorderGuesses","guessList","practiceMode","sort","a","b","answerName","JSON","parse","localStorage","getItem","properties","NAME","proximity","List","guesses","win","globeRef","useState","orderedGuesses","setOrderedGuesses","miles","setMiles","locale","useContext","LocaleContext","langName","useEffect","qualifier","closest","farthest","length","isSortedByDistance","setIsSortedByDistance","guessesToDisplay","className","id","map","guess","idx","NAME_LEN","ABBREV","flag","FLAG","toLocaleLowerCase","name","onClick","e","clickedCountry","findCentre","lat","lng","altitude","turnGlobe","turnToCountry","src","toLowerCase","alt","m","value","rounded","Math","round","toFixed","replace","formatKm","setToggle","toggle","on","off"],"sourceRoot":""}