{"version":3,"file":"static/js/781.7dc2b34b.chunk.js","mappings":"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","sources":["i18n/locales.ts","components/Message.tsx","components/Guesser.tsx"],"sourcesContent":["import { LanguageName } from \"../lib/country\";\nimport { Locale } from \"../lib/locale\";\nimport { German } from \"./messages/de-DE\";\nimport { English } from \"./messages/en-CA\";\nimport { Spanish } from \"./messages/es-MX\";\nimport { French } from \"./messages/fr-FR\";\nimport { Hungarian } from \"./messages/hu-HU\";\nimport { Polish } from \"./messages/pl-PL\";\nimport { Portuguese } from \"./messages/pt-BR\";\nimport { Swedish } from \"./messages/sv-SE\";\n\nexport const LOCALES = {\n  English: English,\n  Spanish: Spanish,\n  French: French,\n  German: German,\n  Hungarian: Hungarian,\n  Portuguese: Portuguese,\n  Polish: Polish,\n  Swedish: Swedish,\n};\n\nexport const langNameMap: Record<Locale, LanguageName> = {\n  \"es-MX\": \"NAME_ES\",\n  \"en-CA\": \"NAME_EN\",\n  \"fr-FR\": \"NAME_FR\",\n  \"de-DE\": \"NAME_DE\",\n  \"hu-HU\": \"NAME_HU\",\n  \"pt-BR\": \"NAME_PT\",\n  \"pl-PL\": \"NAME_PL\",\n  \"it-IT\": \"NAME_IT\",\n  \"sv-SE\": \"NAME_SV\",\n};\n","// import useCheckMobile from \"../hooks/useCheckMobile\";\nimport { isMobile } from \"react-device-detect\";\nimport { answerCountry, answerName } from \"../util/answer\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useContext } from \"react\";\nimport { LocaleContext } from \"../i18n/LocaleContext\";\nimport { langNameMap } from \"../i18n/locales\";\nimport { Country } from \"../lib/country\";\n\ntype Props = {\n  win: boolean;\n  error: any;\n  guesses: number;\n  practiceMode: boolean;\n};\n\nexport function Message({ win, error, guesses, practiceMode }: Props) {\n  const { locale } = useContext(LocaleContext);\n\n  let name = answerName;\n  if (locale !== \"en-CA\") {\n    const langName = langNameMap[locale];\n    name = answerCountry[\"properties\"][langName];\n  }\n  if (practiceMode) {\n    const answerCountry = JSON.parse(\n      localStorage.getItem(\"practice\") as string\n    ) as Country;\n    name = answerCountry.properties.NAME;\n    if (locale !== \"en-CA\") {\n      const langName = langNameMap[locale];\n      name = answerCountry[\"properties\"][langName];\n    }\n  }\n\n  if (error) {\n    return <p className=\"text-red-700 \">{error}</p>;\n  } else if (win) {\n    return (\n      <p className=\"text-green-800 dark:text-green-300 font-bold \">\n        <FormattedMessage id=\"Game7\" values={{ answer: name }} />\n      </p>\n    );\n  } else if (guesses === 0) {\n    return (\n      <p className=\"text-gray-700 dark:text-gray-400 \">\n        <FormattedMessage id=\"Game3\" />\n      </p>\n    );\n  } else if (guesses === 1) {\n    return (\n      <p className=\"text-gray-700 dark:text-gray-400 \">\n        <FormattedMessage\n          id=\"Game4\"\n          values={{\n            span: (chunks: string) => {\n              try {\n                const [click, tap] = JSON.parse(chunks);\n                return isMobile ? <span>{tap}</span> : <span>{click}</span>;\n              } catch (e) {\n                return <span>{chunks}</span>;\n              }\n            },\n          }}\n        />\n      </p>\n    );\n  } else {\n    return <p className=\"text-red-700 \"></p>;\n  }\n}\n","import { FormEvent, useContext, useState, useRef, useEffect } from \"react\";\nimport { Country } from \"../lib/country\";\nimport { answerCountry, answerName } from \"../util/answer\";\nimport { Message } from \"./Message\";\nimport { polygonDistance } from \"../util/distance\";\n// import alternateNames from \"../data/alternate_names.json\";\nimport { LocaleContext } from \"../i18n/LocaleContext\";\nimport localeList from \"../i18n/messages\";\nimport { FormattedMessage } from \"react-intl\";\nimport { langNameMap } from \"../i18n/locales\";\nimport { AltNames } from \"../lib/alternateNames\";\nconst countryData: Country[] = require(\"../data/country_data.json\").features;\nconst alternateNames: AltNames = require(\"../data/alternate_names.json\");\n\ntype Props = {\n  guesses: Country[];\n  setGuesses: React.Dispatch<React.SetStateAction<Country[]>>;\n  win: boolean;\n  setWin: React.Dispatch<React.SetStateAction<boolean>>;\n  practiceMode: boolean;\n};\n\nexport default function Guesser({\n  guesses,\n  setGuesses,\n  win,\n  setWin,\n  practiceMode,\n}: Props) {\n  const [guessName, setGuessName] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const { locale } = useContext(LocaleContext);\n\n  const langName = langNameMap[locale];\n\n  const ref = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    ref.current?.focus();\n  }, [ref]);\n\n  function findCountry(countryName: string, list: Country[]) {\n    return list.find((country) => {\n      const { NAME, NAME_LONG, ABBREV, ADMIN, BRK_NAME, NAME_SORT } =\n        country.properties;\n\n      return (\n        NAME.toLowerCase() === countryName ||\n        NAME_LONG.toLowerCase() === countryName ||\n        ADMIN.toLowerCase() === countryName ||\n        ABBREV.toLowerCase() === countryName ||\n        ABBREV.replace(/\\./g, \"\").toLowerCase() === countryName ||\n        NAME.replace(/-/g, \" \").toLowerCase() === countryName ||\n        BRK_NAME.toLowerCase() === countryName ||\n        NAME_SORT.toLowerCase() === countryName ||\n        country.properties[langName].toLowerCase() === countryName\n      );\n    });\n  }\n\n  // Check territories function\n  function runChecks() {\n    const trimmedName = guessName\n      .trim()\n      .toLowerCase()\n      .replace(/&/g, \"and\")\n      .replace(/^st\\s/g, \"st. \");\n\n    const oldNamePair = alternateNames[locale].find((pair) => {\n      return pair.alternative === trimmedName;\n    });\n    const userGuess = oldNamePair ? oldNamePair.real : trimmedName;\n    const alreadyGuessed = findCountry(userGuess, guesses);\n    if (alreadyGuessed) {\n      setError(localeList[locale][\"Game6\"]);\n      ref.current?.select();\n      return;\n    }\n    const guessCountry = findCountry(userGuess, countryData);\n    if (!guessCountry) {\n      setError(localeList[locale][\"Game5\"]);\n      ref.current?.select();\n      return;\n    }\n    if (practiceMode) {\n      const answerCountry = JSON.parse(\n        localStorage.getItem(\"practice\") as string\n      ) as Country;\n      const answerName = answerCountry.properties.NAME;\n      if (guessCountry.properties.NAME === answerName) {\n        setWin(true);\n      }\n    } else if (guessCountry.properties.NAME === answerName) {\n      setWin(true);\n    }\n    return guessCountry;\n  }\n\n  function addGuess(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    setError(\"\");\n    let guessCountry = runChecks();\n    if (practiceMode) {\n      const answerCountry = JSON.parse(\n        localStorage.getItem(\"practice\") as string\n      );\n      if (guessCountry && answerCountry) {\n        guessCountry[\"proximity\"] = polygonDistance(\n          guessCountry,\n          answerCountry\n        );\n        setGuesses([...guesses, guessCountry]);\n        setGuessName(\"\");\n        return;\n      }\n    }\n    if (guessCountry && answerCountry) {\n      guessCountry[\"proximity\"] = polygonDistance(guessCountry, answerCountry);\n      setGuesses([...guesses, guessCountry]);\n      setGuessName(\"\");\n    }\n  }\n\n  return (\n    <div className=\"mt-10 mb-6 block mx-auto text-center\">\n      <form\n        onSubmit={addGuess}\n        className=\"w-80 flex space-x-4 mx-auto my-2 justify-center\"\n      >\n        <input\n          className=\"shadow px-2 py-1 md:py-0\n          text-gray-700 dark:bg-slate-200 dark:text-gray-900\n          focus:outline-none \n          focus:shadow-outline disabled:bg-slate-400\n          border rounded disabled:border-slate-400\n          w-full\"\n          type=\"text\"\n          name=\"guesser\"\n          id=\"guesser\"\n          value={guessName}\n          onChange={(e) => setGuessName(e.currentTarget.value)}\n          ref={ref}\n          disabled={win}\n          placeholder={guesses.length === 0 ? localeList[locale][\"Game1\"] : \"\"}\n          autoComplete=\"new-password\"\n        />\n        <button\n          className=\"bg-blue-700 dark:bg-purple-800 hover:bg-blue-900 \n          dark:hover:bg-purple-900 disabled:bg-blue-900  text-white \n          font-bold py-1 md:py-2 px-4 rounded focus:shadow-outline \"\n          type=\"submit\"\n          disabled={win}\n        >\n          <FormattedMessage id=\"Game2\" />\n        </button>\n      </form>\n      <Message\n        win={win}\n        error={error}\n        guesses={guesses.length}\n        practiceMode={practiceMode}\n      />\n    </div>\n  );\n}\n"],"names":["langNameMap","English","Spanish","French","German","Hungarian","Portuguese","Polish","Swedish","Message","win","error","guesses","practiceMode","locale","useContext","LocaleContext","name","answerName","langName","answerCountry","JSON","parse","localStorage","getItem","properties","NAME","className","id","values","answer","span","chunks","click","tap","isMobile","e","countryData","require","alternateNames","Guesser","setGuesses","setWin","useState","guessName","setGuessName","setError","ref","useRef","findCountry","countryName","list","find","country","NAME_LONG","ABBREV","ADMIN","BRK_NAME","NAME_SORT","toLowerCase","replace","useEffect","current","focus","onSubmit","preventDefault","guessCountry","trimmedName","trim","oldNamePair","pair","alternative","userGuess","real","localeList","select","runChecks","polygonDistance","type","value","onChange","currentTarget","disabled","placeholder","length","autoComplete"],"sourceRoot":""}