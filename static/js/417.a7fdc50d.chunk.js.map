{"version":3,"file":"static/js/417.a7fdc50d.chunk.js","mappings":"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","sources":["components/Globe.tsx"],"sourcesContent":["import { useContext, useEffect, useRef, useState } from \"react\";\nimport ReactGlobe, { GlobeMethods } from \"react-globe.gl\";\nimport { Country } from \"../lib/country\";\nimport { answerCountry } from \"../util/answer\";\nimport { findCentre, globeImg, turnGlobe } from \"../util/globe\";\nimport { ThemeContext } from \"../context/ThemeContext\";\nimport { getColour } from \"../util/colour\";\nimport { isMobile } from \"react-device-detect\";\nconst territoryData: Country[] = require(\"../data/territories.json\").features;\n\ntype Props = {\n  guesses: Country[];\n  globeRef: React.MutableRefObject<GlobeMethods>;\n  practiceMode: boolean;\n};\n\nconst ZOOM_SPEED = 1;\n\nexport default function Globe({ guesses, globeRef, practiceMode }: Props) {\n  // State\n  const [places, setPlaces] = useState(guesses);\n\n  // Theme\n  const { nightMode, prideMode, highContrast } = useContext(ThemeContext).theme;\n\n  // Globe size settings\n  const size = isMobile ? 320 : 600; // px on one side\n  const extraStyle = {\n    width: `${size}px`,\n    clipPath: `circle(${size / 2}px at ${size / 2}px ${size / 2}px)`,\n  };\n\n  // On first render\n  useEffect(() => {\n    const controls: any = globeRef.current.controls();\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 1;\n    setTimeout(() => {\n      globeRef.current.pointOfView({ lat: 0, lng: 0, altitude: 1.5 });\n    }, 400);\n  }, [globeRef]);\n\n  // After each guess\n  useEffect(() => {\n    // Add territories to guesses to make shapes\n    const territories: Country[] = [];\n    guesses.forEach((guess) => {\n      const foundTerritories = territoryData.filter((territory) => {\n        return guess.properties.NAME === territory.properties.SOVEREIGNT;\n      });\n      if (foundTerritories) territories.push(...foundTerritories);\n    });\n    setPlaces(guesses.concat(territories));\n\n    // Turn globe to new spot\n    const newGuess = [...guesses].pop();\n    if (newGuess) {\n      const controls: any = globeRef.current.controls();\n      controls.autoRotate = false;\n      const newSpot = findCentre(newGuess);\n      turnGlobe(newSpot, globeRef, \"zoom\");\n    }\n  }, [guesses, globeRef]);\n\n  // Stop rotate on drag\n  const containerRef = useRef<HTMLDivElement>(null!);\n  useEffect(() => {\n    const controls: any = globeRef.current.controls();\n    containerRef.current.addEventListener(\"mouseup\", () => {\n      controls.autoRotate = false;\n    });\n    containerRef.current.addEventListener(\"touchend\", () => {\n      controls.autoRotate = false;\n    });\n  }, [globeRef]);\n\n  // Polygon colour\n  function polygonColour(country: Country) {\n    if (practiceMode) {\n      const answerCountry = JSON.parse(\n        localStorage.getItem(\"practice\") as string\n      );\n      return getColour(\n        country,\n        answerCountry,\n        nightMode,\n        highContrast,\n        prideMode\n      );\n    }\n    return getColour(\n      country,\n      answerCountry,\n      nightMode,\n      highContrast,\n      prideMode\n    );\n  }\n\n  // Label colour\n  function getLabel(country: Country) {\n    const name = country.properties.ADMIN;\n    const prox = country.proximity;\n    const dayColour = prox < 750_000 ? \"gray-300\" : \"gray-900\";\n    const nightColour = \"gray-300\";\n    const label = `<b class=\"text-${dayColour} dark:text-${nightColour}\">${name}</b>`;\n    return label;\n  }\n\n  // Polygon altitude\n  function getAltitude(country: Country) {\n    if (!highContrast || country.properties.TYPE === \"Territory\") return 0.01;\n    const prox = country.proximity;\n    let proxFraction = prox / 2_000_000;\n    proxFraction = Math.min(Math.max(proxFraction, 0.01), 0.95);\n    let alt = (1 - proxFraction) / 10;\n    return alt;\n  }\n\n  // Clicking the zoom buttons on mobile\n  function zoom(z: number) {\n    const controls: any = globeRef.current.controls();\n    controls.autoRotate = false;\n    const coords = globeRef.current.pointOfView();\n    const { altitude } = globeRef.current.pointOfView();\n    coords[\"altitude\"] = Math.max(altitude + z, 0.05);\n    globeRef.current.pointOfView(coords, 250);\n  }\n\n  // Called when the globe position changes\n  function globeOnZoom() {\n    overrideGlobeZooming();\n  }\n\n  // Override the zoomSpeed mutation in globe.gl by calling this in the globe's\n  // onZoom callback.\n  //\n  // By the time this callback is called, an onchange event handler on\n  // `controls` defined in globe.gl's `globe.js` source file will have changed\n  // the zoomSpeed based on altitude. We will counteract that to get back the\n  // nice zooming implemented in the three.js library (`OrbitControls.js`).\n  function overrideGlobeZooming() {\n    const controls: any = globeRef.current?.controls();\n    if (controls != null) controls.zoomSpeed = ZOOM_SPEED;\n  }\n\n  const btnFill = nightMode ? \"bg-[#582679]\" : \"bg-[#F3BC63]\";\n  const btnBorder = nightMode ? \"border-[#350a46]\" : \"border-[#FF8E57]\";\n  const btnText = nightMode ? \"text-white font-bold\" : \"\";\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className=\"globe mx-auto cursor-grab text-center select-none\"\n        style={extraStyle}\n      >\n        <ReactGlobe\n          className=\"select-none decoration-transparent cursor-grab \"\n          style={{ \"-webkit-tap-highlight-color\": \"transparent\" }}\n          ref={globeRef}\n          globeImageUrl={globeImg(nightMode)}\n          width={size}\n          height={size}\n          backgroundColor=\"#00000000\"\n          polygonsData={places}\n          // @ts-ignore\n          polygonCapColor={polygonColour}\n          // @ts-ignore\n          polygonLabel={getLabel}\n          // @ts-ignore\n          polygonAltitude={getAltitude}\n          polygonSideColor=\"blue\"\n          onGlobeClick={(d) => turnGlobe(d, globeRef)}\n          onPolygonClick={(p, e, c) => turnGlobe(c, globeRef)}\n          polygonStrokeColor=\"#00000000\"\n          atmosphereColor={nightMode ? \"rgba(63, 201, 255)\" : \"lightskyblue\"}\n          onZoom={globeOnZoom}\n        />\n      </div>\n      {isMobile && (\n        <div className=\"w-full flex justify-between text-md \">\n          <button\n            className={`border-[1px] rounded-md select-none ${btnText} ${btnFill} px-4 ${btnBorder}`}\n            onTouchStart={() => zoom(0.2)}\n          >\n            -\n          </button>\n          <button\n            className={`border-[1px] rounded-md select-none ${btnText} ${btnFill} px-4 ${btnBorder}`}\n            onTouchStart={() => zoom(-0.2)}\n          >\n            +\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["territoryData","require","Globe","guesses","globeRef","practiceMode","useState","places","setPlaces","useContext","ThemeContext","theme","nightMode","prideMode","highContrast","size","isMobile","extraStyle","width","clipPath","useEffect","controls","current","autoRotate","autoRotateSpeed","setTimeout","pointOfView","lat","lng","altitude","territories","forEach","guess","foundTerritories","filter","territory","properties","NAME","SOVEREIGNT","push","concat","newGuess","pop","newSpot","findCentre","turnGlobe","containerRef","useRef","zoom","z","coords","Math","max","addEventListener","btnFill","btnBorder","btnText","ref","className","style","globeImageUrl","globeImg","height","backgroundColor","polygonsData","polygonCapColor","country","answerCountry","JSON","parse","localStorage","getItem","getColour","polygonLabel","name","ADMIN","prox","proximity","polygonAltitude","TYPE","proxFraction","min","polygonSideColor","onGlobeClick","d","onPolygonClick","p","e","c","polygonStrokeColor","atmosphereColor","onZoom","zoomSpeed","overrideGlobeZooming","onTouchStart"],"sourceRoot":""}